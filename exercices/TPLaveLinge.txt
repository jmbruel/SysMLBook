// ------------------------------------------
//  Created by Jean-Michel Bruel on 2012-11-16.
//  Copyright (c) 2012 IRIT/U. Toulouse. All rights reserved.
// ------------------------------------------
:title: Master M2 - DL - IS - TP SysML
// ------------------------------------------
:doctype: article
:description: 
:keywords: 
:Author: Jean-Michel Bruel & Christelle Chaudet
:Author Initials: JMB
:Email: jean-michel.bruel@univ-tlse2.fr
:Revision: 1.0
:localdate: {sys: date +%d/%m/%Y}
:Date: {localdate}
:startdate: 2012-11-16
:images: ../images

// raccourcis sites
:asciidoc: http://www.methods.co.nz/asciidoc[AsciiDoc]

// data

// personnes et institutions
:irit: http://www.irit.fr[IRIT]
:iut: http://www.iut-blagnac.fr[IUT de Blagnac]
:jmb: mailto:jean-michel.bruel@univ-tlse2.fr[Jean-Michel Bruel]

// raccourcis sites
:asciidoc: http://www.methods.co.nz/asciidoc[AsciiDoc]
:eclipse: http://www.eclipse.org[eclipse]
:models: http://www.modelsconference.org/[MODELS]
:moodle: http://webetud.iut-blagnac.fr[Moodle]
:omg: http://www.omg.org[OMG]
:pandoc: http://johnmacfarlane.net/pandoc/[Pandoc]
:slidy2: http://www.w3.org/Talks/Tools/Slidy2/[W3C HTML Slidy]
:rhapsody: http://www-142.ibm.com/software/products/us/en/ratirhap[Rhapsody]
:topcased: http://www.topcased.org[TOPCASED]

// data
:eggstitle: Humour
:sysml: http://www.omg.org/spec/SysML/[SysML] indexterm:[SysML]
:STI2D: STI2D indexterm:[STI2D]
:uml: http://www.uml.org/[UML] indexterm:[UML]
:Requirements: Requirements
:Structure: Structure
:Behavior: Comportement
:Crosscutting: Transverse
:organisation: Organisation
:analysis: Analyse
:design: Conception
:implementation: Implémentation
:resume: En résumé
:revisions: Questions de révision
:is: Ingénierie Système indexterm:[IS]
:sym: http://www.omg.org/spec/SyM/[SysML-Modelica]
:sysmltrends: http://www.google.fr/trends/explore#q=sysml[SysML Trends]

// personnes et institutions
:afis: AFIS
:karina: Karina Aguilar
:nico: Nicolas Belloir
:agusti: Agusti Canals
:dl: http://www.dept-info.ups-tlse.fr/index.php?option=com_content&view=article&id=294&Itemid=697&lang=fr[Master DL-SI]
:loic: Loïc Féjoz
:jmi: Jean-Michel Inglebert
:jmimail: jean-michel.inglebert@univ-tlse2.fr
:incose: http://www.incose.org/[INCOSE]
:irit: http://www.irit.fr[IRIT]
:iut: IUT de Blagnac
:nonne: Laurent Nonne
:omg: http://www.omg.org[OMG]
:prfc: http://www.dotnetguru2.org/proques/index.php[Pascal Roques]
:pdss:  Pierre de Saqui Sannes
:sysmlfrance: http://www.sysml-france.fr[SysML-France]
:univ-tlse: http://www.univ-toulouse.fr[Univesité de Toulouse]
:univ-tlse2: http://www.univ-tlse2.fr[Université de Toulouse II - Le Mirail]
:uag: Universitad Autonoma de Guadalajara
:uppa: Université de Pau et des Pays de l'Adour
:ups: http://www.univ-tlse3.fr[UPS]

//----------- dck.js --------------
// swiss, neon beamer
:deckjs_theme: web-2.0 

//fade, horizontal-slide, vertical-slide
:deckjs_transition: horizontal-slide

///////////////////////
	AsciiDoc use `source-highlight` as default highlighter.

	Styles available for pygment highlighter:
	monokai, manni, perldoc, borland, colorful, default, murphy, vs, trac,
	tango, fruity, autumn, bw, emacs, vim, pastie, friendly, native,

	Uncomment following two lines if you want to highlight your code
	with `Pygments`.
///////////////////////
//:pygments:
//:pygments_style: native
///////////////////////
	Uncomment following line if you want to scroll inside slides
	with {down,up} arrow keys.
///////////////////////
:scrollable:
///////////////////////
	Uncomment following line if you want to link css and js file 
	from outside instead of embedding them into the output file.
///////////////////////
//:linkcss:

= {title}

ifndef::backend-deckjs[]

image:{images}/logoisi.gif[src="{images}/logoisi.gif",width="100",alt="Master DL Logo"]


Dans ce TP, nous allons réaliser des modèles {SysML}.
Nous allons utiliser dans ce TD l'outil {tool}. Nous allons modéliser une *machine à laver le linge*.

endif::backend-deckjs[]

== Contexte

[NOTE]
====
Sujet proposé initialement par Cédric Bouhours.
====

Ci-dessous la description (Wikipedia) du fonctionnement attendu.

include::TPLaveLinge-reqs.txt[]

La machine à laver qui nous intéresse a 

- 4 boutons

1.	Lancement du programme : L’appui sur ce bouton provoque le lancement du programme sélectionné.
2.	Arrêt cuve pleine : Si ce bouton est appuyé, la dernière vidange de la dernière itération de rinçage est bloquée jusqu’à ce que le bouton change d’état. Ce bouton peut être utilisé même après le lancement du programme, mais avant le démarrage du cycle de rinçage.
3.	Essorage 500/1000 : Permet de choisir la vitesse d’essorage (en tours par minute). Ce bouton peut être utilisé à tout moment, même pendant l’essorage.
4.	Rinçage supplémentaire : Ajoute 1 au nombre de rinçages à effectuer. Ce bouton doit être utilisé avant le lancement du programme.

[NOTE]
====
Chaque bouton émet un signal sigB1, sigB2, sigB3 lorsqu’il est activé par l’utilisateur. +
Chaque signal contient en paramètre un booléen indiquant si le bouton et actif ou inactif.
====

- 2 molettes

1.	Molette de programmation : Permet de sélectionner le numéro de programme. Une fois le programme démarré, cette molette n’est plus utilisable.
2.	Molette de réglage de la température : Permet de sélectionner la température de lavage. Une fois le programme démarré, cette molette n’est plus utilisable.

Au niveau sécurité, la machine doit verrouiller le hublot lorsque le programme démarre. Le hublot reste verrouillé 30 secondes après la fin de la dernière étape du dernier cycle. Durant l’arrêt cuve pleine, le hublot doit rester verrouillé.

Plusieurs contrôleurs « boîte noire » vous sont fournis :

- +C_Temperature+ : Retourne la température de la cuve. De plus, ce contrôleur réagit au signal +sigCHAUFFE+ avec en paramètre un 
booléen [+true+ : chauffe, +false+ : ne chauffe pas]
- +C_Poids+ : Lève un flag lorsqu’il y a assez d’eau dans la cuve. Il effectue le calcul en fonction de la charge de la cuve.
- +C_Eau+ : Sur votre ordre (signal : +sigEAU+ avec en paramètre un booléen [+true+ : ouvert, +false+ : fermé]), ouvre ou ferme la vanne d’arrivée d’eau
- +C_Bac+ : Sur votre ordre (signal : +sigBAC+ avec en paramètre le numéro du bac [0 pour un écoulement direct]) dévie l’écoulement de l’eau vers le bac concerné. La déviation est stable (lorsque le bac 1 est sélectionné, il le restera jusqu’à ce que l’on change de bac).
- +C_Hublot+ : Sur votre ordre (signal : +sigLOCK+ avec en paramètre un booléen), verrouille ou déverrouille le hublot.
- +C_Moteur+ : Sur votre ordre (signal : +sigMOT+ avec en paramètre les valeurs « lavage », « 500 », « 1000 », « stop ») contrôle la rotation du moteur entraînant le tambour.
- +C_Pompe+ : Sur votre ordre (signal : +sigPOMPE+ avec en paramètre un booléen), active ou désactive la pompe de vidange. Ce contrôleur émet le signal +sigVIDE+ lorsque la cuve est vide.
- +C_SelTemp+ : Retourne la température de lavage programmée.
- +C_SelProg+ : Retourne le numéro du programme choisi.
- +C_RincSup+ : Retourne l’état du bouton 4 [+true+ : bouton actif, +false+ : bouton inactif].

[TIP]
====
Par composant "boîte noire", on veut dire que vous n'avez pas à descendre plus bas dans la décomposition du
système (on considère que ces éléments sont fournis ou importés).
====

== Travail à effectuer

Après avoir créé un modèle {SysML} dans {TOPCASED}, et après avoir effectué un tour d’horizon de l’outil :

. Ouvrez un nouveau projet (en pensant à le définir du type +SysML+)
. Ajoutez votre propre organisation (en utilisant les +packages+ comme vu en cours, cf. exemples ci-dessous)
 si besoin (+right-click->add->+) 
+
.Exemple d'organisation possible
image:{images}/pkg-organisation.png["organization",height="300",link="{images}/pkg-organisation.png"]
+
.Exemple d'organisation proposée par TOPCASED
image:{images}/pkg-topcased.png["organization",height="300",link="{images}/pkg-topcased.png"]
+
.	Réalisez le diagramme des exigences, résumant les caractéristiques présentées ci-dessus. N’hésitez pas à utiliser les relations (+derive+, +refine+, +satisfy+, ...) ainsi que les notes typées (+problem+, +rationale+).
.	Représentez les cas d’utilisation dans un diagramme des cas d'utilisation +uc+ associé.
.	Réalisez le diagramme de séquence +sd+ système représentant un scénario d’utilisation de la machine à laver pour un cas d'utilisation intéressant.
.	En ne négligeant aucun élément, constituez le diagramme de définition de blocs +bdd+.
.	Proposez un diagramme interne de bloc +ibd+. Adaptez si besoin votre diagramme de définition de blocs.
.	Ajouter de la cohérence dans vos modèles en ajoutant des liens de traçabilité (+verify+, +allocate+, etc.) entre _requirements_ et éléments de modèles

== Travail complémentaire (si vous avez le temps)

.	Pour les blocs pour lesquels c’est nécessaire, réalisez un diagramme d’état +sm+
.	Proposez les diagrammes d’activités permettant de représenter le fonctionnement général de la machine à laver.

[NOTE]
====
Pour ceux qui voudraient aller plus loin sur les aspects animations, installez une version d'évaluation
du logiciel {rhapsody} et réalisez le TP spécifique que vous trouverez (en anglais) 
http://jmbhome.heroku.com/teaching/SysML/tp-undergraduate.html[ici].
====
 

== Conclusion

Vous avez manipulé _a minima_ les diagrammes {sysml} suivants dans ce TP : +pkg+, +uc+, +bdd+, +ibd+, +seq+.

== Liens utiles

- http://www.dept-info.ups-tlse.fr/index.php?option=com_content&view=article&id=294&Itemid=697&lang=fr[Le lien UPS sur le cours]
- http://www.sysml-france.org/[SysML]
- http://www.eclipse.org[eclipse]
- http://www-142.ibm.com/software/products/us/en/ratirhap[Rhapsody]
- http://www.topcased.org/[TOPCASED]


ifndef::backend-deckjs[]

**********************************************************************
Document généré par mailto:{email}[JMB] via {asciidoc} (version +8.6.8+) de 'Stuart Rackham'.
La version file:main.deckjs.html[présentation] a été générée en utilisant {deckjs} (C) de 'Qingping Hou'.
Pour l'instant ce document est libre d'utilisation et géré par la 'Licence Creative Commons'. 
image:../../images/icons/88x31.png["Licence Creative 
Commons",style="border-width:0",link="http://creativecommons.org/licenses/by-sa/3.0/"]
http://creativecommons.org/licenses/by-sa/3.0/[licence Creative Commons Paternité - Partage à l&#39;Identique 3.0 non transposé].
**********************************************************************

endif::backend-deckjs[]

ifdef::backend-deckjs[]

== About...

**********************************************************************
Document généré par mailto:{email}[JMB] via {asciidoc} (version +8.6.8+) de 'Stuart Rackham'.
Cette présentation a été générée en utilisant {deckjs} (C) de 'Qingping Hou'. La version
en une page HTML (donc imprimable) est disponible file:main.html[ici] .
Pour l'instant ce document est libre d'utilisation et géré par la 'Licence Creative Commons'. 
image:../../images/icons/88x31.png["Licence Creative 
Commons",style="border-width:0",link="http://creativecommons.org/licenses/by-sa/3.0/"]
http://creativecommons.org/licenses/by-sa/3.0/[licence Creative Commons Paternité - Partage à l&#39;Identique 3.0 non transposé].
**********************************************************************

endif::backend-deckjs[]

== FAQ

=== Peut-on avoir un _requirement_ contenu dans plusieurs autres ?

Non. Le lien de _containment_ est en fait une action qui place le "contenu" dans le
"contenant". Dans TOPCASED, le diagramme laisse les liens précédents à l'écran, mais dans
le modèle, c'est bien le dernier _containment_ réalisé qui est pris en compte. Dans 
la figure ci-dessous le lien +A-C+ a été "dessiné" après celui +B-C+.

.Exemple de divergence entre modèle et diagramme (bug)
image:topcased-containment-1.png[]image:topcased-containment-2.png[]

[NOTE]
====
Ce "bug" provient du fait que le lien de _containment_ n'est pas un lien de dépendance,
mais plutôt une représentation graphique de la contenance.
====

=== Comment alors peut-on "partager" un _requirement_ ?

(En lien avec la question précédente)

L'organisation {sysml} des _requirements_ est en fait un arbre. Pour réaliser ce "partage" certains utilisent un lien `<<copy>>` pour créer plusieurs copies d'un même _requirement_. Personnellement je n'aime pas cette solution.

.Exemple de partage de _requirement_
image:topcased-containment-3.png[]

=== Peut-on avoir un lien `<<satisfy>>` entre exigences?
	
Techniquement oui (`<<satisfy>>` étant dérivé de `<<trace>>`, lui-même une `<<dependency>>`), mais ça n'a pas beaucoup de sens que de dire qu'un besoin est satisfait par un autre. Il s'agit le plus souvent d'un lien `<<deriveReqt>>`.

image:../images/satisfy.png[]
	
[NOTE]
====
Certaines méthodes utilise ce lien pour par exemple exprimer qu'une exigence cliente et satisfaite par une exigence système (comme la méthode Harmony).
====
	 
=== Quelle est la différence entre `<<deriveReqt>>` et `<<refine>>` ?
	
La norme n'impose pas de sémantique précise à `<<deriveReqt>>`. Il y a généralement deux interprétations.
	
1. Un usage classique est de l'utiliser pour ajouter des exigences plus détaillés déduites à partir d'autres exigences. Un exemple issue de la norme est une exigence de +puissance moteur+ déduite (+deriveReqt+) depuis l'exigence sur l’+accélération+ d'un véhicule.

2. Une vision plus stricte, aussi illustré par l'exemple précédent, est que l'exigence dérivée est une condition nécessaire (un pré-requis) à l'exigence cible.

Autre exemple respectant 1 mais pas 2 : "Le véhicule doit posséder 4 roues." est dérivé de "Le véhicule doit se déplacer sur route." En effet, un aéroglisseur répondrait aussi l'exigence initiale et n'a pourtant pas de roues.

Quant au `<<refine>>` il est utilisé pour indiquer qu'un élément de modèle (qui peut être lui-même un _requirement_) est un raffinement (au sens niveaux d'abstraction, du plus abstrait au plus concret) d'un _requirement_. Par exemple, un _use case_ ou un diagramme d'activité peut être un raffinement d'une exigence fonctionnelle (textuelle par exemple). 

=== A quoi sert le lien `<<trace>>` ?
	
Il est utilisé pour indiquer que l'on souhaite conserver un lien de traçabilité entre les éléments
(par exemple entre un élément de modélisation et un document). Il est recommandé d'utilisé une de ces
versions plus précises (`<<deriveReqt>>` ou `<<satisfy>>` par exemple).
