== Une démarche parmi d'autres

Nous allons aborder le développement complet de notre exemple fil rouge en suivant une démarche classique et simple
(utilisée par exemple dans <<SeeBook2012>>, où proche de la démarche globale enseignée dans nos cous de DUT Informatique, ou encore proche des documents de référence en la matière <<HAS2012>>, <<KAP2007>>,<<FIO2012>>) :

1. Spécification du système 
2. Conception du système
3. Traçabilité et Allocations
4. Modèle de test

Nous partirons du modèle des exigences produit initialement. Mais avant tout, parlons outils.

ifdef::backend-deckjs[:leveloffset: -1]

=== Environnement de développement

Nous sommes des défenseurs des principes <<DRY>> et <<TDD>>. Nous allons donc réaliser nos diagrammes dans un outil et non "à la main" (de simples dessins).
Nous choisissons ici l'outil {topcased} pour des raisons que nous expliquerons ailleurs. La version utilisée pour réaliser les exemples de cette section 
est la version +5.2+.

Un outil {SysML} seul ne suffit pas (cf. <<outils>>). Il faut penser à la documentation (cf. <<gendoc>>).

.Outillage autour de SysML
ifdef::book[image::{images}/SysMLTool-fr.png[scale=30]]
ifndef::book[image::SysMLTool-fr.png[width="80%",alt="Outillage autour de SysML"]]

ifdef::backend-deckjs[:leveloffset: -2]

[[outils]]
==== Outils

Il existe de nombreux outils {sysml}. Nous renvoyons le lecteur sur le site de {sysmlfrance} pour 
des informations sur les dernières versions des outils.


[[gendoc]]
==== Génération de documentation

La plupart des outils permettent de générer de la documentation. Pour les outils basés {eclipse} comme
{topcased}, il est possible d'utiliser le plug-in +GenDoc2+.

.Génération de documentation à partir de TOPCASED (1)
ifdef::book[image::{images}/gendoc-1.png[scale=40]]
ifndef::book[image::gendoc-1.png["GENDOC",height="300",link="gendoc-1.png"]]

.Génération de documentation à partir de TOPCASED (1)
ifdef::book[image::{images}/gendoc-2.png[scale=40]]
ifndef::book[image::gendoc-2.png["GENDOC",height="300",link="gendoc-2.png"]]

Les outils commerciaux comme {rhapsody} permettent de générer de nombreux formats.

.Génération de documentation à partir de Rhapsody
ifdef::book[image::{images}/gendoc-rhapsody1.png[scale=40]]
ifndef::book[image::gendoc-rhapsody1.png["Rhapsody",height="300",link="gendoc-rhapsody1.png"]]

==== Animation de modèles et simulation

Fortement liée aux outils, la possibilité d'animer les modèles ou encore d'effectuer des simulations
est une exigence de plus en plus forte des ingénieurs systèmes.

Il existe de nombreuses possibilités. Citons par exemple :

Génération de code VHDL::
	L'outil +RTaW+ propose, via génération de code VHDL de simuler les modèles. Voir une démonstration
	https://www.realtimeatwork.com/wp-content/uploads/screencasts/bouncingball/[ici].
Simulation en Rhapsody::
	L'outil {rhapsody} possède une interface très pratique pour faire du prototypage rapide.
+
ifdef::book[image::{images}/rhapsody-animation.png[scale=50]]
ifndef::book[image::rhapsody-animation.png["Animation",width="80%",link="rhapsody-animation.png"]]
+
Voir mon tutoriel (en anglais) disponible http://jmbhome.heroku.com/teaching/SysML/tp-undergraduate.html[ici].

Animation de modèles en Artisan::
	L'outil +Artisan+ permet également de faire de l'animation de modèles.
	
.Animation Artisan
ifdef::book[image::{images}/artisan.png[scale=50]]
ifndef::book[image::artisan.png["Animation",width="80%",link="artisan.png"]]

ifdef::backend-deckjs[:leveloffset: -1]
	
=== Spécification du système

Il s’agit ici de décrire le contexte et d’identifier les principaux cas d’utilisation du système.

[[contexte]]

=== Conception du système

Chaque cas d'utilisation sera précisé (`seq` et `act`).
Les données métier seront alors identifiées pour construire le modèle d’architecture logique (+{bdd}+ et +{ibd}+) complété par la description des comportements complexes (+{stm}+).
Enfin le modèle d’architecture physique permettra de déterminer les aspects déploiement et constructions physiques d'équipements/

=== Traçabilité et Allocations 

Afin de consolider les différents modèles, les liens de traçabilité qui n'auront pas été déjà décrit footnote:[Il est recommandé de ne pas attendre pour matérialiser ces liens, mais de les exprimés dès que rencontrés dans telle ou telle modélisation.] seront rajoutés en insistant sur les liens :

- de satisfaction des exigences par les éléments de l’architecture, 
- d’allocation des éléments du modèle fonctionnel vers les éléments logiques, 
- d’allocation des éléments logiques vers les éléments de l’architecture physique.

=== Modèle de test

Nous insistons dans l'ensemble de nos formations sur les approches _test-driven_, alors nous montrons dans cette section comment participer à la qualité du développement d'un système en formalisant (par exemple avec des diagrammes de séquence de scénarios à éviter)
les test et les jeux de test.

ifdef::backend-deckjs[:leveloffset: 0]

<<<<

== Recettes et bonnes pratiques

La plupart des ouvrages sur un langage enseignent les éléments de ce langage, comme nous l'avons fait à la partie précédente.
Nous allons ici partir du principe inverse : comment modéliser tel ou tel partie ou vue de mon système avec SysML. Un peu à la
manière des ouvrages du type _Cookbook_, nous allons donner une liste non exhaustives de recettes. Les choix des éléments de modélisation sont arbitraires ou tirés de discussions (comme ce sera mentionné si c'est le cas).

ifdef::backend-deckjs[:leveloffset: -1]

=== Architecture

.Je souhaite modéliser mon système dans son environnement
[caption="Recette : "]
NOTE: C'est conseillé. Un block +System+ permet de raccrocher tous les éléments qui le composent à un même niveau.
Dans l'exemple ci-dessous le système (le bloc +Pacemaker+) est lui-même un simple composant d'un élément de plus haut niveau : le contexte du système (le bloc +Context+) qui relie alors le système à son environnement.
Voir aussi <<contexte>>.

.Le contexte du Pacemaker (<<SeeBook2012>>)
ifdef::book[image::{images}/pacemaker-context.png[scale=50]]
ifndef::book[image::pacemaker-context.png[width="70%",alt="Le contexte du Pacemaker"]]

=== Comportement

.Je souhaite modéliser les différents modes (nominal, alternatifs)
[caption="Recette : "]
NOTE: Un diagramme d'état peu modéliser les différents modes et les événements qui produisent les changements de mode.

////
=== Patrons de conception système

Mérite une section ??

/////

ifdef::backend-deckjs[:leveloffset: 0]
