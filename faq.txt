//-================================================================================
[[faq]]
== FAQ
//-================================================================================

Cette FAQ (_**F**requently **A**sked **Q**uestions_) a été construite par expérience, en regroupant 
les questions des étudiants durant mes différentes interventions. 
J'ai aussi ajouté des questions souvent rencontrées dans les journées organisées par {sysmlfrance}. 

NOTE: Voir aussi cette http://www.sysmlforum.com/faq[FAQ] très bien faite.

Cette FAQ peut servir de base à la révision d'examens (cf. aussi <<Exos>>).

:numbered!:
ifdef::backend-deckjs[]
:leveloffset: -1
endif::backend-deckjs[]


//-================================================================================
// Généralités
//-================================================================================

=== Quelle est la version courante de la spécification et comment l'obtenir?

Version +1.3+ et disponible à l'URL: http://www.sysml.org/docs/specs/OMGSysML-v1.3-12-06-02.pdf

=== Quels en sont les changements notables depuis la dernière version ?
(en lien avec  la question précédente)

Les changements notables par rapport à la +1.2+ concernent :

- synchronisation avec les changements d'UML 2.3
- le métamodèle de _Conjugate ports_ et sa notation 
- le nommage des _activity regions_ "interruptible" 
- inclusion de _UML instance_ 
- inclusion des _structured activity nodes_ d'UML 
- inclusion des _multiple item flow_ d'UML
- améliorations du support à _Unit_ et _QuantityKind_ pour les _value types_, 
et ajout d'un modèle (non normatif) pour définir les systèmes d'unités et de quantités.

[NOTE]
====
SysML v1.3 _Revision Task Force_ dirigée par Roger Burkhart et Rick Steiner améliore de manière régulière la spécification en fonction des retours des utilisateurs.
====

=== Quelle est la différence entre les différents ports : +proxy+, +nested+, +flow+, ... ?

La version +1.3+ a précisé la sémantique des ports et abandonne le concept de +flow specification+
au profit d'une description via un bloc possédant des +flow properties+ (cf. <<FlowP,Flow properties>>).

[[FlowP]]
.Préciser les propriétés des _Flow Ports_
image:flowport2.png[scale=60] image:flowport1.png[scale=60]
	
Ainsi :

- Les ports par défauts (hérités {duml}) permettent d'indiquer des services fournis et requis.
- Les ports de type flot (_flow_) spécifient que quelque-chose "circule" dans ou depuis un bloc. 
- Si le bloc représentant le port possède lui-même des ports, on parle alors de _nested ports_ (cf. <<nestedPort,Nested Ports>>).
- Enfin, un _proxy port_ permet de donner accès à l'extérieur d'un bloc à l'un des ports de l'un de ses composants. 

[[nestedPort]]
._Nested Ports_
image::nestedPort.png[scale=60]

[NOTE]
====
Voi aussi les blogs :

- http://model-based-systems-engineering.com/2012/04/02/whats-new-in-sysml-1-3/
- http://model-based-systems-engineering.com/2013/09/23/sysml-full-ports-versus-proxy-ports/
====

=== Qu'est-ce que la certification SysML et comment la passer?

Les informations sur la certification sont sur le
http://www.omg.org/ocsmp/exam-info.htm[site dédié] de {lomg}.

La certification (qui coûte environ 300€ par niveau) permet de garantir
que celui qui la possède maîtrise la notation. 
Il faut actuellement s'inscrire via le site de http://www.pearsonvue.com/omg/[Pearson Vue].

[TIP]
====
Il faut vraiment maîtriser les concepts eux-même (le métamodèle), et pas seulement avoir une bonne pratique.
De plus, il faut également bien maîtriser l'anglais car les questions/réponses sont en anglais et leur 
formulation peut comporter des pièges.

Pour vous tester sur le méta-modèle, vous pouvez vous tester sur le quizz 
réalisé par {loic} : http://www.realtimeatwork.com/2010/06/test-quizz/
====

//-================================================================================
// REQ
//-================================================================================

=== Peut-on avoir un _requirement_ contenu plusieurs fois ?

Non. Le lien de _containment_ est en fait une action qui place le "contenu" dans le
"contenant". Dans TOPCASED, le diagramme laisse les liens précédents à l'écran, mais dans
le modèle, c'est bien le dernier _containment_ réalisé qui est pris en compte. Dans 
la figure ci-dessous le lien +A-C+ a été "dessiné" après celui +B-C+.

.Exemple de divergence modèle/diagramme (diagramme)
ifdef::book[image::topcased-containment-1.png[scale=60]]
ifndef::book[image::topcased-containment-1.png[]]

.Exemple de divergence modèle/diagramme (modèle)
ifdef::book[image::topcased-containment-2.png[scale=60]]
ifndef::book[image::topcased-containment-2.png[]]

[NOTE]
====
Ce "bug" provient du fait que le lien de _containment_ n'est pas un lien de dépendance,
mais plutôt une représentation graphique de la contenance.
====

=== Comment alors peut-on "partager" un _requirement_ ?

(En lien avec la question précédente)

L'organisation {sysml} des _requirements_ est en fait un arbre. Pour réaliser ce "partage" certains utilisent un lien `<<copy>>` pour créer plusieurs copies d'un même _requirement_. Personnellement je n'aime pas cette solution.

.Exemple de partage de _requirement_
ifdef::book[image::topcased-containment-3.png[scale=50]]
ifndef::book[image::topcased-containment-3.png[]]

.Définition : Réutilisation d'exigences (OMG SysML v1.3, Fig.16.6, p. 152)
[icon="images/icons/sysml.jpeg"]
[NOTE]
====
_...the use of the Copy dependency [...] allow a single requirement to be reused in several requirements hierarchies._
====


=== Peut-on avoir un lien `<<satisfy>>` entre exigences?

Techniquement oui (`<<satisfy>>` étant dérivé de `<<dependency>>`), mais ça n'a pas beaucoup de sens que de dire qu'un besoin est satisfait par un autre. Il s'agit le plus souvent d'un lien `<<deriveReqt>>`.

[NOTE]
====
Certaines méthodes utilisent ce lien pour par exemple exprimer qu'une exigence cliente est satisfaite par une exigence système (comme la méthode <<Harmony>>).
====

=== Quelle est la différence entre `<<deriveReqt>>` et `<<refine>>` ?

La norme n'impose pas de sémantique précise à `<<deriveReqt>>`. Il y a généralement deux interprétations.

1. Un usage classique est de l'utiliser pour ajouter des exigences plus détaillés déduites à partir d'autres exigences. Un exemple issue de la norme est une exigence de +puissance moteur+ déduite (+deriveReqt+) depuis l'exigence sur l’+accélération+ d'un véhicule.

2. Une vision plus stricte, aussi illustré par l'exemple précédent, est que l'exigence dérivée est une condition nécessaire (un pré-requis) à l'exigence cible.

Autre exemple respectant 1 mais pas 2 : "Le véhicule doit posséder 4 roues." est dérivé de "Le véhicule doit se déplacer sur route." En effet, un aéroglisseur répondrait aussi l'exigence initiale et n'a pourtant pas de roues.

Quant au `<<refine>>` il est utilisé pour indiquer qu'un élément de modèle (qui peut être lui-même un _requirement_) est un raffinement (au sens niveaux d'abstraction, du plus abstrait au plus concret) d'un _requirement_. Par exemple, un _use case_ ou un diagramme d'activité peut être un raffinement d'une exigence fonctionnelle (textuelle par exemple). 

=== A quoi sert le lien `<<trace>>` ?

Il est utilisé pour indiquer que l'on souhaite conserver un lien de traçabilité entre les éléments
(par exemple entre un élément de modélisation et un document). Il est recommandé d'utilisé une de ces
versions plus précises (`<<deriveReqt>>` ou `<<satisfy>>` par exemple).

=== Comment SysML permet-il la validation et la vérification des exigences ?

//http://www.sysmlforum.com/faq/how-does-sysml-enable-requirements-verification-and-validation.html

Comment {SysML} permet de vérifier et de valider les exigences ?

La *validation* d'une exigence est de la responsabilité des {stakeholders}.
À partir de la spécification des exigences, 
ils valident qu'il s'agit bien du bon produit à construire. 
Typiquement, le diagramme des exigences sert de base à cette validation.

La *vérification* d'une exigence est de la responsabilité de l'ingénieur système et/ou de l'analyste système. 
C'est à eux de montrer la correspondance entre les éléments constituant du système et les exigences spécifiées.
C'est principalement pour cette activité que sont utilisés les relations `<<satisfy>>` et `<<verify>>`.

.Validation et Vérification des exigences (Reproduced by Permission © 2003-2013 PivotPoint Technology Corp)
ifdef::book[image::Requirements-VV.png[scale=50]]
ifndef::book[image::Requirements-VV.png[width="70%"]]

//-================================================================================
// UC
//-================================================================================

=== À quoi sert un diagramme des UC avec un seul cas d'utilisation ?

image::plantuml/uc6.png[]

Tout simplement à relier les autres diagrammes à ce cas d'utilisation. Par exemple le comportement
du système, l'architecture, etc. (les solutions) pourront être reliées (`<<satisfy>>`) à ce cas.
Il faut aussi ne pas perdre de vue qu'un diagramme peut évoluer. On pourra très bien rajouter au
diagramme des cas non encore pris en compte comme +Transporter le système+, +Recycler le système+, etc.

=== Comment faut-il comprendre "interaction" dans les diagrammes d'UC ?

La définition de la norme {norme} :

[[actorsdef]]
.Définition : _Actors_ (OMG SysML v1.3, p. 123)
[icon="images/icons/sysml.jpeg"]
[NOTE]
====
_... Actors represent classifier roles that are external to the system that may correspond to users, systems, and or other environmental entities. They may interact either directly or indirectly with the system ..._
====

Pour la comprendre il ne faut pas utiliser le Larousse français (qui rend presque le caractère réciproque obligatoire),
mais plutôt la comprendre dans son acceptation informatique (comme dans "Interaction Homme-Machine").
Par exemple un message (appel de méthode) d'un élément vers un autre dans un diagramme de séquence est appelé en {SysML} une _interaction_.
 
{SysML} permet de *préciser le caractère réciproque* ou non de l'interaction par exemple entre un +Acteur+ et un +Cas d'utilisation+ :

[[UCinter]]
.Trois types d'interaction différentes possibles en SysML
image::plantuml/uc5.png[]

=== Les "matières premières" font-elles parties des acteurs ?

On pourrait les considérer comme des acteurs en se fiant à la définition (cf. <<actorsdef,Acteurs>>)
et en les associant à des _environmental entities_.
Mais elles sont échangées avec les entités de l'environnement, ce qui n'est pas la même chose.
Autrement dit, il faut indiquer qui fournit les matières premières et qui recueille les matières produites
éventuellement en tant qu'acteurs, pas les matières elles-même, qui seront représenter comme des flux
échangés ou des blocs.
Eventuellement on peut les retrouver dans le diagramme de contexte ou encore dans un
diagramme structurel comme le diagramme de bloc interne.

[TIP]
====
Je recommande la lecture (anglaise, _sorry_) de l'excellent plaidoyer pour la mort des acteurs :
http://model-based-systems-engineering.com/tag/sysml/.
====

[WARNING]
====
Donc non, le soleil et le vent ne sont pas des acteurs!! (ni la corde, ni la raquette)
====

=== Pour l'analyse fonctionnelle : diagramme des UC ou des activités ?

Pour alimenter le débat, je renvois aux exemples donnés par {loic} lors de la journée {UPSTI}.
Voici un diagramme classique {fast} :

.Diagramme FAST
image::fast.png[]

.Représentation possible en SysML
image::sysml-fast.png[]

On pourrait croire que ces schémas sont identiques mais pas du
tout. {SysML} présente juste l'organisation du modèle et non l'arbre
d'appel. De plus, {FAST} a tendance à focaliser sur une solution unique
alors que {SysML} permet de repousser ce choix voir d'explorer des alternatives.

//-================================================================================
// ACT
//-================================================================================

=== Quelle est la différence entre un _join_ de type "OU" et un _fusion_ dans un diagramme d'activités ?

Pour rappel le _join_ est utilisé pour représenter la synchronisation (le "rendez-vous") et
représente donc une conjonction "ET". Mais le comportement par défaut pouvant être modifié par
un `<<joinSpecification>>`, on peut indiquer un "OU" pour signifier l'attente d'un seul des deux jetons.
Mais justement le _fusion_ est là pour ça normalement. Ces 2 concepts étant issus d'{UML}, il
nous faut nous référer à la norme de ce dernier:

.Définition : Types de diagrammes (UML Superstructure v2.4.1 p. 399)
[icon="images/icons/sysml.jpeg"]
[NOTE]
====
All tokens offered on incoming edges are offered to the outgoing edge. There is no synchronization of flows or joining of tokens.
====

Il n'y a donc sémantiquement aucune différence.

[WARNING]
====
Attention, il n'y a pas beaucoup de sens à utiliser un _join_ de cette façon, car non seulement il ne "joint" plus rien,
mais en plus contrairement à un _join_ qui "consomme" les 2 jetons, une telle utilisation aurait pour effet de laisser
les 2 jetons passer, mais l'un après l'autre!
====

//-================================================================================
// STM
//-================================================================================

=== Un système peut il avoir plusieurs états?

On lit souvent qu'il n'y a pour un système ou un composant "qu'un seul état actif à la fois".

Du point de vue structurel, si l'on considère que l'état à un instant +t+ d'un composant est représenté par
la valeur de ses attributs à cet instant, alors cette composition est unique. Néanmoins cela prête souvent
à confusion avec le fait qu'un composant dont le comportement est décrit par une machine à état avec des
régions concurrentes peut se retrouver dans plusieurs états ({sysml} du coup) en même temps.

Il faut donc bien faire la différence entre :

- l'*état du système* (en tant qu'association de valeurs d'attributs à un instant T)
qui lui est unique à un instant donné, et 
- l'*état d'une machine à états* (en tant qu'abstraction d'un ensemble d'états au sens précédent).

.Exemple d'un système ayant plusieurs états, au sens des machine à états (fourni par {loic}) 
[NOTE]
====
Soit un système avec une unique variable +i+.
Les états du systèmes seraient par exemple l'ensemble des entiers naturels (positifs).
Dans une machine à état UML, on pourrait par exemple avoir l'état +pair+ et l'état +impair+.
Mais on pourrait aussi avoir, deux-sous états (+nul+ et +non-nul+) et rajouter en concurrence (+multiple de 4+ ou non, etc.).
====

[[Grafcet]]
=== Comment traduire un Grafcet en machine à état ?

En automatique, la notation la plus connue pour représenter la dynamique d'un système est le {grafcet}.
Il semble qu'il existe une synthèse du passage {grafcet} => diagramme d'état. J'attends de le trouver
pour l'intégrer ici. Car sans en être un spécialiste, ce que j'en ai lu me fait plutôt penser à un diagramme
d'activité (notamment par leur proximités à tous les deux avec les {rdp}).

//-================================================================================
// FAQ anglaise
//-================================================================================
ifdef::uk[]

=== What is the current version of SysML and how can I obtain it?

Verson 1.3 and here is the specification link: http://www.omg.org/cgi-bin/doc?formal/10-06-02.

=== What changes were made during the last revision?

Notable changes in Version 1.2 of SysML include:

- Synchronization with changes in UML 2.3
- Conjugate ports metamodel and notation 
- Naming of interruptible activity regions 
- Inclusion of UML instance specifications
 -Inclusion of UML structured activity nodes 
- Inclusion of UML multiple item flow notation
- Improvements to Unit and QuantityKind support for value types, and a non-normative model to define systems of units and quantities

NOTE: The SysML v1.3 Revision Task Force led by Roger Burkhart and Rick Steiner is continuing to work on proposed improvements to SysML based on feedback from the systems modeling community.


=== How do we setup ranges (limits) of (input) variables (in a par for example)?

In the details or the definition of the Flow Item.

=== What does the +\{strict\}+ keyword means for profile application?

No other meta-elements than the one in the applied profile were used (e.g., you can use a tool supporting the profile with confidence).

[quote, SysML1.2 p. 8]
____________________________________________________________________
The semantics of UML profiles ensure that when a user model “strictly” applies the SysML profile, only the UML metaclasses referenced by SysML are available to the user of that model. If the
profile is not “strictly” applied, then additional UML metaclasses that were not explicitly referenced may also be available.
____________________________________________________________________

=== What does the visibility (+private+, +public+, ...) means for a block?

As any model elements, the visibility of a block describes how it can be imported outside its namespace.

NOTE: It depends on the tool support for visibility controls to use this feature.

=== What is the difference between an internal and a self transition?

In a self transition the exit and the the entry events are trigered.

=== Can I attach a History pseudostate to a particular (non composite) state?

No. The History pseudostate (H) is indicated inside a composite state and means that when back in this superstate, the machine goes back to its last active state.

endif::uk[]

//-================================================================================
// Divers
//-================================================================================
=== Divers

Quelques autres questions que je laisse à votre sagacité :

- Pourquoi les ingénieurs systèmes auraient-ils besoin d'un n-ième langage de modélisation ?
- Quelles sont les relations entre “open source SysML” et “OMG SysML” ?
- Quelle est la feuille de route pour SysML 2.0?
- Quelles sont les relations entre UML et SysML? Peut-on les utiliser ensemble?
- Peut-on "_customizer_" SysML?
- Quel langage est le plus facile à apprendre, SysML ou UML?

ifdef::uk[]

- Why do systems engineer need yet-another-modeling-language?
- What is the relationship between “open source SysML” and “OMG SysML”?
- What is the roadmap for OMG SysML 2.0?
- Who are the SysML Partners?
- What is the relationship between UML and SysML? Can SysML and UML be used together?
- Can SysML be customized?
- Which language is easier to learn, SysML or UML?

endif::uk[]

ifdef::backend-deckjs[]
:leveloffset: 0
endif::backend-deckjs[]

//-================================================================================
// FAQ française des questions idiotes
//-================================================================================
== FABQ

Cette _**F**requently **A**sked **B**ad **Q**uestions_ est une compilation des questions
trouvées parfois dans les forums et qui montrent l'incompréhension qui entoure encore {sysml}. 

ifdef::backend-deckjs[]
:leveloffset: -1
endif::backend-deckjs[]

=== Comment installer SysML?

{sysml} n'est pas un programme qu'on installe. Il existe de nombreux
outils qui chacun possède sa propre façon d'être installé sur votre machine
(en fonction de votre système d'exploitation, si c'est un _plugin_, etc.).

=== Comment exécuter un diagramme SysML?

Les diagrammes {sysml} ne sont que des dessins, des représentations graphiques,
ils ne s'_exécutent_ donc pas. Bien sûr de nombreux travaux et outils portent sur
les modèles exécutables. Il s'agit alors pour un outil de proposer de reproduire
la dynamique d'un diagramme. Il s'agit en général de diagramme de comportement
(par exemple une machine à état) pour lequel l'outil propose de simuler l'arrivée
d'événement et de reproduire (plus ou moins graphiquement) le comportement modélisé
(par exemple le franchissement d'une transition).



:numbered:
ifdef::backend-deckjs[]
:leveloffset: 0
endif::backend-deckjs[]
